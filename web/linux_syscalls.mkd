<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8">
  <meta name="generator" content="pandoc">
  <meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=yes">
  <meta name="author" content="Rémi Audebert - Pierre Surply">
  <meta name="dcterms.date" content="2015-05-21">
  <title>Linux - Introduction</title>
  <style type="text/css">code{white-space: pre;}</style>
  <!--[if lt IE 9]>
    <script src="http://html5shim.googlecode.com/svn/trunk/html5.js"></script>
  <![endif]-->
  <style type="text/css">
div.sourceCode { overflow-x: auto; }
table.sourceCode, tr.sourceCode, td.lineNumbers, td.sourceCode {
  margin: 0; padding: 0; vertical-align: baseline; border: none; }
table.sourceCode { width: 100%; line-height: 100%; }
td.lineNumbers { text-align: right; padding-right: 4px; padding-left: 4px; color: #aaaaaa; border-right: 1px solid #aaaaaa; }
td.sourceCode { padding-left: 5px; }
code > span.kw { color: #007020; font-weight: bold; }
code > span.dt { color: #902000; }
code > span.dv { color: #40a070; }
code > span.bn { color: #40a070; }
code > span.fl { color: #40a070; }
code > span.ch { color: #4070a0; }
code > span.st { color: #4070a0; }
code > span.co { color: #60a0b0; font-style: italic; }
code > span.ot { color: #007020; }
code > span.al { color: #ff0000; font-weight: bold; }
code > span.fu { color: #06287e; }
code > span.er { color: #ff0000; font-weight: bold; }
  </style>
  <link rel="stylesheet" href="style.css">
</head>
<body>
<header>
<h1 class="title">Linux - Introduction</h1>
<h2 class="author">Rémi Audebert - Pierre Surply</h2>
<h3 class="date">2015-05-21</h3>
</header>
<nav id="TOC">
<ul>
<li><a href="#introduction">Introduction</a><ul>
<li><a href="#what-is-a-kernel">What is a kernel?</a></li>
</ul></li>
<li><a href="#the-linux-kernel">The Linux kernel</a><ul>
<li><a href="#main-features">Main features</a></li>
<li><a href="#why-know-linux">Why know Linux?</a></li>
<li><a href="#who-is-behind-linux">Who is behind Linux?</a></li>
<li><a href="#current-status">Current status</a></li>
<li><a href="#usage-and-hardware-support">Usage and hardware support</a></li>
<li><a href="#android">Android</a></li>
</ul></li>
<li><a href="#meeting-linux">Meeting Linux</a><ul>
<li><a href="#overview">Overview</a></li>
<li><a href="#the-source">The source</a></li>
<li><a href="#the-kernel-source-tree-13">The kernel source tree (1/3)</a></li>
<li><a href="#the-kernel-source-tree-23">The kernel source tree (2/3)</a></li>
<li><a href="#the-kernel-source-tree-33">The kernel source tree (3/3)</a></li>
<li><a href="#development-process">Development process</a></li>
<li><a href="#release-cycle">Release cycle</a></li>
<li><a href="#configuring-the-kernel">Configuring the kernel</a></li>
<li><a href="#kernel-options">Kernel options</a></li>
<li><a href="#kconfig">Kconfig</a></li>
<li><a href="#config-files">Config files</a></li>
<li><a href="#vendor-kernels">Vendor kernels</a></li>
<li><a href="#build">Build</a></li>
<li><a href="#more-targets">More targets</a></li>
</ul></li>
<li><a href="#interacting-with-linux">Interacting with Linux</a><ul>
<li><a href="#the-command-line-kernel-parameters">The command line: kernel parameters</a></li>
<li><a href="#syscalls">Syscalls</a></li>
<li><a href="#the-kernel-log">The kernel log</a></li>
<li><a href="#loadable-kernel-modules-lkm">Loadable kernel modules (LKM)</a></li>
<li><a href="#pseudo-file-systems">Pseudo file systems</a></li>
</ul></li>
<li><a href="#writing-code-for-linux">Writing code for Linux</a><ul>
<li><a href="#essential-developer-tools">Essential developer tools</a></li>
<li><a href="#useful-developer-tools">Useful developer tools</a></li>
<li><a href="#cscope">Cscope</a></li>
<li><a href="#lxr-httplxr.free-electrons.com">LXR (http://lxr.free-electrons.com)</a></li>
<li><a href="#lxr-httplxr.free-electrons.com-1">LXR (http://lxr.free-electrons.com)</a></li>
<li><a href="#coding-style">Coding style</a></li>
<li><a href="#coding-style-1">Coding style</a></li>
<li><a href="#coding-style-2">Coding style</a></li>
<li><a href="#kernel-space">Kernel space</a></li>
<li><a href="#unique-bugs">Unique bugs</a></li>
<li><a href="#your-first-module">Your first module</a><ul>
<li><a href="#where-to-put-it">Where to put-it?</a></li>
<li><a href="#hello-module">Hello Module</a></li>
<li><a href="#explanations">Explanations</a></li>
<li><a href="#explanations-1">Explanations</a></li>
<li><a href="#printk"><code>printk()</code></a></li>
<li><a href="#pr_fmt"><code>pr_fmt</code></a></li>
<li><a href="#compiling-your-module">Compiling your module</a></li>
<li><a href="#dynamic-debug">Dynamic debug</a></li>
<li><a href="#submitting-patches">Submitting patches</a></li>
</ul></li>
</ul></li>
<li><a href="#more-documentation">More documentation</a><ul>
<li><a href="#more-documentation-1">More documentation</a></li>
<li><a href="#contact-info">Contact info</a></li>
</ul></li>
<li><a href="#generalities">Generalities</a><ul>
<li><a href="#what-is-a-syscall">What is a syscall?</a></li>
</ul></li>
<li><a href="#the-syscall-userland-interfaces">The syscall userland interfaces</a><ul>
<li><a href="#in-assembly">In assembly</a><ul>
<li><a href="#on-x86">On x86</a></li>
<li><a href="#on-x86_64">On x86_64</a></li>
</ul></li>
<li><a href="#syscall2">syscall(2)</a></li>
<li><a href="#dont-panic">Don’t panic!</a></li>
<li><a href="#vdso7">vdso(7)</a></li>
<li><a href="#context-switch">Context switch</a></li>
<li><a href="#vdso-in-action">vdso in action</a></li>
</ul></li>
<li><a href="#implementation">Implementation</a><ul>
<li><a href="#defining-a-syscall">Defining a syscall</a></li>
<li><a href="#example">Example</a></li>
<li><a href="#side-notes">Side notes</a><ul>
<li><a href="#signal_pending">signal_pending</a></li>
<li><a href="#current">current</a></li>
<li><a href="#schedule">schedule()</a></li>
</ul></li>
<li><a href="#the-syscalls-tables">The syscalls tables</a><ul>
<li><a href="#syscall_32.tbl"><code>syscall_32.tbl</code></a></li>
<li><a href="#syscall_64.tbl"><code>syscall_64.tbl</code></a></li>
</ul></li>
<li><a href="#generation">Generation</a></li>
</ul></li>
<li><a href="#a-guided-tour-of-some-syscalls">A guided tour of some syscalls</a><ul>
<li><a href="#sysinfo">sysinfo</a></li>
<li><a href="#user-data">User data</a><ul>
<li><a href="#user"><code>__user</code></a></li>
<li><a href="#copy_to_user"><code>copy_to_user</code></a></li>
</ul></li>
<li><a href="#ioctl">ioctl</a></li>
<li><a href="#clone">clone</a><ul>
<li><a href="#clone-1">clone</a></li>
<li><a href="#fork">fork</a></li>
<li><a href="#vfork">vfork</a></li>
</ul></li>
<li><a href="#personality">personality</a></li>
<li><a href="#reboot">reboot</a></li>
<li><a href="#rt_xxx-syscalls"><code>rt_XXX</code> syscalls</a></li>
<li><a href="#going-further-than-syscalls">Going further than syscalls</a></li>
<li><a href="#references">References</a></li>
<li><a href="#contact-info-1">Contact info</a></li>
</ul></li>
</ul>
</nav>
<div id="content">
<h1 id="introduction">Introduction</h1>
<h3 id="what-is-a-kernel">What is a kernel?</h3>
<p>The kernel is the part of the system that:</p>
<ul>
<li>manages the hardware</li>
<li>allocates resources eg. memory pages or CPU cycles</li>
<li>is responsible for the file system and network communication</li>
<li>provides an abstraction layer for the applications: the userland</li>
</ul>
<h1 id="the-linux-kernel">The Linux kernel</h1>
<h3 id="main-features">Main features</h3>
<ul>
<li>Portable</li>
<li>Versatile</li>
<li>Stable</li>
<li>Mature</li>
<li>Secure</li>
<li>Robust</li>
</ul>
<h3 id="why-know-linux">Why know Linux?</h3>
<blockquote>
<p>Finding Linux talent is becoming more of a priority for hiring managers.</p>
</blockquote>
<blockquote>
<p>Hiring managers are increasing the number of Linux professionals they are searching for.</p>
</blockquote>
<blockquote>
<p>Knowing Linux advances careers.</p>
</blockquote>
<blockquote>
<p>– Linux Jobs Report 2014</p>
</blockquote>
<h3 id="who-is-behind-linux">Who is behind Linux?</h3>
<ul>
<li>An open source community</li>
<li>Around 1200 developers for one release</li>
<li>Around 200 maintainers</li>
<li>Around 80% of the changes are sponsored</li>
<li>Linus Torvalds makes the official releases</li>
</ul>
<h3 id="current-status">Current status</h3>
<ul>
<li>GPLv2</li>
<li>Latest stable release: 4.0.4 (2015-05-17)</li>
<li>Latest development release: 4.1-rc4 (2015-05-18)</li>
<li>Regular 2-3 month releases:
<ul>
<li>deliver stable updates</li>
<li>significant new features</li>
<li>added device support</li>
<li>improved performance</li>
</ul></li>
<li>Mainline repository: <code>git://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git</code> (1.5G)</li>
</ul>
<h3 id="usage-and-hardware-support">Usage and hardware support</h3>
<p>Linux supports more computer architecture than any other OS.</p>
<figure>
<img src="Operating_systems_used_on_top_500_supercomputers.png" alt="TOP500 OS from wikimedia" /><figcaption>TOP500 OS from wikimedia</figcaption>
</figure>
<h3 id="android">Android</h3>
<ul>
<li>Long time fork of Linux</li>
<li>Some sources in <code>drivers/staging/android</code></li>
<li>Binder was moved late 2014: <code>drivers/android/binder.c</code></li>
</ul>
<h4 id="usage-stats">Usage stats</h4>
<blockquote>
<p>Adroid now has 1 billion monthly active users</p>
<p>– Sundar Pichai</p>
</blockquote>
<h1 id="meeting-linux">Meeting Linux</h1>
<h3 id="overview">Overview</h3>
<figure>
<img src="Linux_kernel_map.png" alt="Linux kernel map" /><figcaption>Linux kernel map</figcaption>
</figure>
<h3 id="the-source">The source</h3>
<figure>
<img src="kernel_org.png" alt="kernel.org" /><figcaption>kernel.org</figcaption>
</figure>
<h3 id="the-kernel-source-tree-13">The kernel source tree (1/3)</h3>
<ul>
<li><code>arch/</code> Architecture-specific code</li>
<li><code>block/</code> Block I/O layer</li>
<li><code>crypto/</code> Cryptographic API</li>
<li><code>Documentation/</code> Kernel source documentation</li>
<li><code>drivers/</code> Device drivers (except sound ones)</li>
<li><code>firmware/</code> Device firmware needed for some devices</li>
<li><code>fs/</code> Filesystems infrastructure</li>
<li><code>include/</code> Kernel headers
<ul>
<li><code>include/linux/</code> Core kernel headers</li>
<li><code>include/uapi/</code> User space API headers</li>
</ul></li>
<li><code>init/</code> Kernel initialization</li>
<li><code>ipc/</code> System V InterProcess Communication (sem, shm, msgqueue)</li>
</ul>
<h3 id="the-kernel-source-tree-23">The kernel source tree (2/3)</h3>
<ul>
<li><code>kernel/</code> Linux kernel core</li>
<li><code>lib/</code> Routine library (lists, trees, string, etc.)</li>
<li><code>mm/</code> Memory management</li>
<li><code>net/</code> Network support code (not drivers!)</li>
<li><code>samples/</code> Sample code (trace, kobject, krpobes)</li>
<li><code>scripts/</code> Scripts for internal or external use</li>
<li><code>security/</code> Security frameworks</li>
<li><code>sound/</code> Sound code and drivers</li>
<li><code>tools/</code> User space tools</li>
<li><code>usr/</code> Generate the initramfs</li>
<li><code>virt/</code> Virtualization infrastructure (kvm)</li>
</ul>
<h3 id="the-kernel-source-tree-33">The kernel source tree (3/3)</h3>
<ul>
<li><code>COPYING</code> The kernel licence (GPLv2)</li>
<li><code>CREDITS</code> The people who have contributed to the kernel</li>
<li><code>Kbuild</code> Kernel build system</li>
<li><code>Kconfig</code> Description of configuration parameters</li>
<li><code>MAINTAINERS</code> Maintainer of subsystems and drivers</li>
<li><code>Makefile</code> Base kernel Makefile</li>
<li><code>README</code> Overview of the kernel</li>
<li><code>REPORTING-BUGS</code> Instructions for reporting bugs</li>
</ul>
<h3 id="development-process">Development process</h3>
<ul>
<li>Each file has a set of maintainers.</li>
<li>They are responsible for triaging bugs, reviewing patches and directing changes.</li>
<li>Patches are sent to mailing-lists for review.</li>
<li>Once approved, they are sent to the maintainer of the subsystem.</li>
<li>Subsystem maintainers review them and place them in a special branch.</li>
<li>They send this branch to Linus Torvalds, that will merge it to his branch.</li>
</ul>
<h3 id="release-cycle">Release cycle</h3>
<ul>
<li>The merge window is open (~2 weeks).</li>
<li>Release candidates (<code>-rc</code>) are published.</li>
<li>No new feature is added, only bug fixes (~6-10 weeks).</li>
<li>The final release is tagged by Linus Torvalds.</li>
</ul>
<h3 id="configuring-the-kernel">Configuring the kernel</h3>
<ul>
<li>The kernel is a single file, resulting of the compilation process.</li>
<li>Compile-time options (<code>-D</code> flags) can be used to select which features are compiled-in and their settings.</li>
<li><p>However, after the boot process, it can load module from the filesystem at runtime to extend its features. Each module is a single file.</p></li>
<li>Configuring the kernel is:
<ul>
<li>Choosing what’s going into the main file, and what will be built as modules.</li>
<li>Setting various options.</li>
</ul></li>
</ul>
<h3 id="kernel-options">Kernel options</h3>
<ul>
<li>Options have the form <code>CONFIG_FEATURE</code> and a type, eg.
<ul>
<li><code>CONFIG_MODULES</code> boolean (true/false)</li>
<li><code>CONFIG_INITRAMFS_ROOT_UID</code> integer</li>
<li><code>CONFIG_INITRAMFS_SOURCE</code> string</li>
<li><code>CONFIG_MAGIC_SYSRQ_DEFAULT_ENABLE</code> hex</li>
<li><code>CONFIG_BTRFS_FS</code> tristate (true/module/false)</li>
</ul></li>
<li>Options can depend on others.</li>
<li>Two types of dependencies:
<ul>
<li>A <code>select</code> B, enabling A enables B</li>
<li>A <code>depends on</code> B, A is not visible until B is enabled</li>
</ul></li>
</ul>
<h3 id="kconfig">Kconfig</h3>
<p></p>
<pre><code>config BTRFS_FS
    tristate &quot;Btrfs filesystem support&quot;
    select CRYPTO
    select CRYPTO_CRC32C
    select ZLIB_INFLATE
    select ZLIB_DEFLATE
    select LZO_COMPRESS
    select LZO_DECOMPRESS
    select RAID6_PQ
    select XOR_BLOCKS

    help
      Btrfs is a general purpose copy-on-write filesystem
      with extents, writable snapshotting, support for
      multiple devices and many more features focused on
      fault tolerance, repair and easy administration.

      [...]</code></pre>
<h3 id="config-files">Config files</h3>
<h4 id="config"><code>.config</code></h4>
<p>Simple text files, <code>key=value</code> format.</p>
<h4 id="default-.config-files">Default <code>.config</code> files</h4>
<ul>
<li><code>make defconfig</code>: new config with default from $ARCH supplied defconfig</li>
<li><code>make i386_defconfig</code>: request defconfig from a platform</li>
</ul>
<h4 id="editing-.config-files">Editing <code>.config</code> files</h4>
<ul>
<li><code>make config</code>: text based</li>
<li><code>make menuconfig</code>, <code>make nconfig</code>: menu/ncurses interface</li>
<li><code>make xconfig</code>, <code>make gconfig</code>: graphical interface</li>
<li><code>make oldconfig</code>: upgrade <code>.config</code> with options from the new release</li>
</ul>
<h3 id="vendor-kernels">Vendor kernels</h3>
<p>Linux distributions typically enable a lot of kernel features and drivers, most of them are compiled as modules.</p>
<h4 id="read-the-config-file-of-your-kernel">Read the config file of your kernel</h4>
<p>Require <code>CONFIG_IKCONFIG_PROC=y</code>:</p>
<div class="sourceCode"><pre class="sourceCode bash"><code class="sourceCode bash">$ <span class="kw">zcat</span> /proc/config.gz
<span class="ot">CONFIG_64BIT=</span>y
<span class="ot">CONFIG_X86_64=</span>y
<span class="ot">CONFIG_X86=</span>y
<span class="ot">CONFIG_INSTRUCTION_DECODER=</span>y
<span class="ot">CONFIG_OUTPUT_FORMAT=</span><span class="st">&quot;elf64-x86-64&quot;</span>
<span class="ot">CONFIG_ARCH_DEFCONFIG=</span><span class="st">&quot;arch/x86/configs/x86_64_defconfig&quot;</span>
<span class="kw">...</span></code></pre></div>
<h3 id="build">Build</h3>
<ul>
<li>Only interact with the top-directory Makefile</li>
</ul>
<div class="sourceCode"><pre class="sourceCode bash"><code class="sourceCode bash">$ <span class="kw">make</span> menuconfig <span class="co"># Edit .config</span>
$ <span class="kw">make</span> <span class="co"># Build the kernel and modules</span></code></pre></div>
<p>Produces:</p>
<ul>
<li>…</li>
<li><code>vmlinux</code>: ELF object of the kernel, cannot be booted</li>
<li><code>arch/x86/boot/bzImage</code>: bootable compressed kernel image</li>
<li><code>**/*.ko</code>: Modules</li>
</ul>
<h3 id="more-targets">More targets</h3>
<ul>
<li><code>make help</code>: list all available targets</li>
<li><code>make modules</code>: build/rebuild modules</li>
<li><code>make headers_install</code>: “install” headers in the local <code>usr/</code></li>
<li><code>make modules_install</code>: install to <code>/lib/modules/KVER</code>
<ul>
<li><code>INSTALL_MOD_PATH=dir/</code> to select the directory</li>
</ul></li>
</ul>
<h1 id="interacting-with-linux">Interacting with Linux</h1>
<h3 id="the-command-line-kernel-parameters">The command line: kernel parameters</h3>
<ul>
<li>It is a string for runtime configuration:
<ul>
<li>no recompilation</li>
<li>can be builtin, using the <code>CONFIG_CMDLINE</code> option</li>
<li>can be used to pass arguments to the <code>init</code> program</li>
</ul></li>
<li>Many kernel options, examples:
<ul>
<li><code>root=/dev/sda1</code> the root filesystem</li>
<li><code>console=ttyS0</code> where to write kernel messages</li>
<li><code>debug</code>, <code>loglevel=7</code> kernel verbosity</li>
<li><code>usbcore.blinkenlights=true</code> also available for modules</li>
</ul></li>
<li>More documentation: <code>Documentation/kernel-parameters.txt</code></li>
</ul>
<h3 id="syscalls">Syscalls</h3>
<ul>
<li>The system call is the fundamental interface between an application and the Linux kernel.</li>
<li>Typically accessed via wrapper functions of the libc. The name of the wrapper function is usually the same as the name of the system call that it invokes.</li>
<li>More than 320 on x86, some are architecture-specific, but most are common.</li>
<li>One of the key component of Linux’ maturity.</li>
</ul>
<p>More details in the next lesson!</p>
<h3 id="the-kernel-log">The kernel log</h3>
<ul>
<li>The kernel stores msgs in a circular log buffer:
<ul>
<li><code>/proc/ksmg</code> for raw output</li>
<li><code>/dev/kmsg</code> for structured message reading</li>
</ul></li>
<li>By default the kernel log is outputted on the console, see the <code>console=</code> kernel parameter.</li>
<li>The <code>dmesg</code> tool (diagnostic message) can be used to read those messages.</li>
<li>When using <code>systemd</code>, <code>journalctl -k</code> displays the kernel log.</li>
</ul>
<h3 id="loadable-kernel-modules-lkm">Loadable kernel modules (LKM)</h3>
<h4 id="loading">Loading</h4>
<ul>
<li>Require <code>CONFIG_MODULES=y</code></li>
<li><code>insmod</code>: Plug a <code>.ko</code> file into the kernel.</li>
<li><code>modprobe</code>: Load a module (no <code>.ko</code>) and its dependencies.</li>
<li>Both handle module parameters:
<ul>
<li><code>$ insmod ./snd-intel8x0m.ko index=-2</code></li>
</ul></li>
</ul>
<h4 id="unloading">Unloading</h4>
<ul>
<li>Require <code>CONFIG_MODULE_UNLOAD=y</code></li>
<li><code>rmmod</code>: Unplug the module.</li>
<li><code>modprobe -r</code>: Also remove unused dependencies.</li>
</ul>
<h4 id="info">Info</h4>
<ul>
<li><code>lsmod</code>: Show the status of modules in the Linux Kernel.</li>
<li><code>modinfo</code>: Show information about a Linux Kernel module.</li>
</ul>
<h3 id="pseudo-file-systems">Pseudo file systems</h3>
<p>There are many pseudo file systems in Linux, here are some of them:</p>
<ul>
<li><code>proc</code>: (<code>/proc</code>) processes info, raw stuff, etc.</li>
<li><code>sysfs</code>: (<code>/sys</code>) structured information about various kernel subsystems, tied to <code>kobjects</code></li>
<li><code>devtmpfs</code>: (<code>/dev</code>) kernel populated devices nodes</li>
</ul>
<p>More details in the next lesson!</p>
<h1 id="writing-code-for-linux">Writing code for Linux</h1>
<h3 id="essential-developer-tools">Essential developer tools</h3>
<ul>
<li>The C language (ISO C99 and gnu extensions)</li>
<li>GNU Make</li>
<li>Git</li>
</ul>
<h3 id="useful-developer-tools">Useful developer tools</h3>
<ul>
<li><code>cscope</code>: Browse source code</li>
<li>LXR: Linux Cross Reference</li>
<li><code>scripts/*</code></li>
</ul>
<h3 id="cscope">Cscope</h3>
<ul>
<li>http://cscope.sourceforge.net/</li>
<li>Built in VIM and Emacs!</li>
<li>Search:
<ul>
<li>Symbol definition</li>
<li>Symbol usage</li>
<li>Function callers/callee</li>
<li>Text</li>
<li>…</li>
</ul></li>
<li>You must generate the database.
<ul>
<li>Use <code>make cscope</code> to get the database of your architecture.</li>
</ul></li>
</ul>
<h3 id="lxr-httplxr.free-electrons.com">LXR (http://lxr.free-electrons.com)</h3>
<p></p>
<p> <img src="lxr_home.png" alt="LXR home" /></p>
<h3 id="lxr-httplxr.free-electrons.com-1">LXR (http://lxr.free-electrons.com)</h3>
<p></p>
<p> <img src="lxr_example.png" alt="LXR example" /></p>
<h3 id="coding-style">Coding style</h3>
<blockquote>
<p>First off, I’d suggest printing out a copy of the GNU coding standards, and NOT read it. Burn them, it’s a great symbolic gesture.</p>
<p>– Documentation/CodingStyle</p>
</blockquote>
<ul>
<li>Indentation uses tabs.</li>
<li>Tabs are 8 spaces.</li>
<li>No more than 80 chars per line (more a guideline than a hard rule).</li>
</ul>
<h3 id="coding-style-1">Coding style</h3>
<div class="sourceCode"><pre class="sourceCode c"><code class="sourceCode c"><span class="dt">int</span> foo(<span class="dt">void</span>)
{
    <span class="kw">return</span> <span class="dv">0</span>;
}</code></pre></div>
<div class="sourceCode"><pre class="sourceCode c"><code class="sourceCode c"><span class="kw">if</span> (cond) {
    do_foo();
    do_bar();
}</code></pre></div>
<div class="sourceCode"><pre class="sourceCode c"><code class="sourceCode c"><span class="kw">if</span> (cond) {
    do_foo();
    do_bar();
} <span class="kw">else</span> {
    do_baz();
}</code></pre></div>
<h3 id="coding-style-2">Coding style</h3>
<div class="sourceCode"><pre class="sourceCode c"><code class="sourceCode c"><span class="kw">if</span> (cond)
    do_foo();
<span class="kw">else</span>
    do_baz();</code></pre></div>
<div class="sourceCode"><pre class="sourceCode c"><code class="sourceCode c"><span class="dt">int</span> get_bar(<span class="kw">struct</span> bar *p)
{
    <span class="dt">int</span> r;

    r = kmalloc(<span class="kw">sizeof</span>(*p), GFP_KERNEL);
    <span class="kw">if</span> (!r)
        <span class="kw">return</span> -ENOMEM;

    <span class="kw">return</span> <span class="dv">0</span>;
}</code></pre></div>
<h3 id="kernel-space">Kernel space</h3>
<ul>
<li>No access to the usual libc.</li>
<li>No unbreakable memory protection.</li>
<li>No floating-point operations.</li>
<li>Fixed-size stack.</li>
<li>Preemptive and Symetric Multi-Processors (SMP) capable. Synchronization and concurrency are major concerns.</li>
</ul>
<h3 id="unique-bugs">Unique bugs</h3>
<h4 id="httpslkml.orglkml2014724584">https://lkml.org/lkml/2014/7/24/584</h4>
<blockquote>
<p>Somebody needs to raise that as a gcc bug. Because it damn well is some seriously crazy shit.</p>
<p>– Linus Torvalds</p>
</blockquote>
<h2 id="your-first-module">Your first module</h2>
<h3 id="where-to-put-it">Where to put-it?</h3>
<p>Two alternatives:</p>
<ul>
<li>Inside the official kernel tree:
<ul>
<li>Integrated in the kernel repository</li>
<li>Can be built statically</li>
<li>Supported by the community: debug and update</li>
</ul></li>
<li>Out of tree:
<ul>
<li>In a directory outside the kernel source</li>
<li>Needs to be built separately</li>
</ul></li>
</ul>
<h3 id="hello-module">Hello Module</h3>
<p></p>
<div class="sourceCode"><pre class="sourceCode c"><code class="sourceCode c"><span class="co">/* hello.c */</span>
<span class="ot">#include &lt;linux/init.h&gt;</span>
<span class="ot">#include &lt;linux/module.h&gt;</span>
<span class="ot">#include &lt;linux/printk.h&gt;</span>

<span class="dt">static</span> __init <span class="dt">int</span> hello_init(<span class="dt">void</span>)
{
    pr_info(<span class="st">&quot;Hello, world!</span><span class="ch">\n</span><span class="st">&quot;</span>);
    <span class="kw">return</span> <span class="dv">0</span>;
}

<span class="dt">static</span> __exit <span class="dt">void</span> hello_exit(<span class="dt">void</span>)
{
    pr_info(<span class="st">&quot;Goodbye.</span><span class="ch">\n</span><span class="st">&quot;</span>);
}

module_init(hello_init);
module_exit(hello_exit);

MODULE_LICENSE(<span class="st">&quot;GPL&quot;</span>);
MODULE_DESCRIPTION(<span class="st">&quot;Hello module&quot;</span>);
MODULE_AUTHOR(<span class="st">&quot;Rémi Audebert&quot;</span>);</code></pre></div>
<h3 id="explanations">Explanations</h3>
<h4 id="macros">Macros</h4>
<ul>
<li><code>__init</code>: The code is discarded after initialization (both for static and module compilation).</li>
<li><code>__exit</code>: The code is discarded if the module is built statically or if module unloading is disabled.</li>
</ul>
<h4 id="module-setupcleanup">Module setup/cleanup</h4>
<div class="sourceCode"><pre class="sourceCode c"><code class="sourceCode c"><span class="dt">int</span> mod_init(<span class="dt">void</span>);
<span class="dt">void</span> mod_exit(<span class="dt">void</span>);</code></pre></div>
<h3 id="explanations-1">Explanations</h3>
<h4 id="module-metadata">Module metadata</h4>
<ul>
<li>Retrievable using <code>modinfo</code>.</li>
<li><code>MODULE_LICENSE</code> is important:
<ul>
<li>Non-free software modules have no access to GPL exported symbols.</li>
<li>Non-free modules set the proprietary taint flag on the kernel.</li>
</ul></li>
<li>Also useful: <code>MODULE_VERSION</code>, <code>MODULE_INFO</code>, <code>MODULE_SOFTDEP</code></li>
<li>More information: <code>include/linux/module.h</code></li>
</ul>
<h3 id="printk"><code>printk()</code></h3>
<ul>
<li><code>printk()</code> is the kernel space version of <code>printf</code>.</li>
<li>Multiple logging levels:
<ul>
<li><code>pr_emerg(), pr_alert(), pr_crit(), pr_err(), pr_warn(), pr_notice(), pr_info(), pr_debug()</code></li>
</ul></li>
<li>Modern code uses <code>pr_xxx</code>.</li>
<li><code>pr_devel()</code> while you develop your code.</li>
<li><code>pr_cont()</code> for continuing lines with no newline (<code>\n</code>).</li>
<li>Formats are described in <code>Documentation/printk-formats.txt</code>.</li>
</ul>
<h3 id="pr_fmt"><code>pr_fmt</code></h3>
<p>You define the <code>pr_fmt</code> macro to set the default format to all your <code>pr_xxx</code> calls.</p>
<div class="sourceCode"><pre class="sourceCode c"><code class="sourceCode c"><span class="ot">#define pr_fmt(fmt) KBUILD_MODNAME &quot;: &quot; fmt</span>
<span class="ot">#include &lt;linux/printk.h&gt;</span>
...
    pr_devel(<span class="st">&quot;Test.</span><span class="ch">\n</span><span class="st">&quot;</span>);</code></pre></div>
<h3 id="compiling-your-module">Compiling your module</h3>
<p></p>
<div class="sourceCode"><pre class="sourceCode makefile"><code class="sourceCode makefile"><span class="kw">ifeq</span> (<span class="ch">$(</span><span class="dt">KERNELRELEASE</span><span class="ch">)</span>,)
<span class="co"># Assume the source tree is where the running kernel was built</span>
<span class="co"># You should set KERNELDIR in the environment if it&#39;s elsewhere</span>
<span class="dt">KERNELDIR </span><span class="ch">?=</span><span class="st"> /lib/modules/</span><span class="ch">$(</span><span class="kw">shell</span><span class="st"> uname -r</span><span class="ch">)</span><span class="st">/build</span>

<span class="co"># The current directory is passed to sub-makes as argument</span>
<span class="dt">PWD </span><span class="ch">:=</span><span class="st"> </span><span class="ch">$(</span><span class="kw">shell</span><span class="st"> pwd</span><span class="ch">)</span>

<span class="dv">modules:</span>
    <span class="ch">$(</span><span class="dt">MAKE</span><span class="ch">)</span> -C <span class="ch">$(</span><span class="dt">KERNELDIR</span><span class="ch">)</span> M=<span class="ch">$(</span><span class="dt">PWD</span><span class="ch">)</span> modules
<span class="dv">modules_install:</span>
    <span class="ch">$(</span><span class="dt">MAKE</span><span class="ch">)</span> -C <span class="ch">$(</span><span class="dt">KERNELDIR</span><span class="ch">)</span> M=<span class="ch">$(</span><span class="dt">PWD</span><span class="ch">)</span> modules_install
<span class="dv">clean:</span>
    rm -rf *.o *~ core .depend .*.cmd *.ko *.mod.c .tmp_versions

<span class="ot">.PHONY:</span><span class="dt"> modules modules_install clean</span>
<span class="kw">else</span>
<span class="co"># called from kernel build system: just declare our module</span>
<span class="dt">obj-m </span><span class="ch">:=</span><span class="st"> hello.o</span>
<span class="kw">endif</span></code></pre></div>
<h3 id="dynamic-debug">Dynamic debug</h3>
<ul>
<li>Enabled if your kernel have <code>CONFIG_DYNAMIC_DEBUG=y</code>.</li>
<li>Registers a control file: <code>/sys/kernel/debug/dynamic_debug/control</code>.</li>
<li>Display the current configuration by reading this file.</li>
<li>Enable debug calls using:</li>
</ul>
<div class="sourceCode"><pre class="sourceCode bash"><code class="sourceCode bash"><span class="co"># debug for the module `mymodule`</span>
$ <span class="kw">cd</span> /sys/kernel/debug/dynamic_debug
$ <span class="kw">echo</span> <span class="st">&#39;module mymodule +p&#39;</span> <span class="kw">&gt;</span> control</code></pre></div>
<ul>
<li>Documentation in <code>Documentation/dynamic-debug-howto.txt</code></li>
</ul>
<h3 id="submitting-patches">Submitting patches</h3>
<ol type="1">
<li>Commit:
<ul>
<li><code>git commit --signoff</code></li>
</ul></li>
<li>Make a patch:
<ul>
<li><code>git format-patch origin..master</code></li>
</ul></li>
<li>Check your patch:
<ul>
<li><code>./scripts/checkpatch.pl 0001-my-commit.patch</code></li>
</ul></li>
<li>Send email:
<ul>
<li><code>git send-email 0001-my-commit.patch</code></li>
</ul></li>
</ol>
<h1 id="more-documentation">More documentation</h1>
<h3 id="more-documentation-1">More documentation</h3>
<h4 id="irc">IRC</h4>
<ul>
<li><code>irc.oftc.net #kernelnewbies</code></li>
</ul>
<h4 id="web">Web</h4>
<ul>
<li>http://kernelnewbies.org</li>
</ul>
<h4 id="books">Books</h4>
<p>Warning: Linux moves fast, those books contain outdated information.</p>
<ul>
<li>Linux device drivers: <a href="https://lwn.net/images/pdf/LDD3" class="uri">https://lwn.net/images/pdf/LDD3</a></li>
<li>Linux Kernel Development</li>
<li>Linux System Programming</li>
<li>Linux in a Nutshell</li>
<li>Understanding the Linux Kernel</li>
<li>The Linux Programming Interface</li>
</ul>
<h3 id="contact-info">Contact info</h3>
<ul>
<li>Rémi Audebert
<ul>
<li>halfr on irc.rezosup.org</li>
<li>halfr@lse.epita.fr</li>
</ul></li>
<li>Pierre Surply
<ul>
<li>Ptishell on irc.rezosup.org</li>
<li>pierre.surply@lse.epita.fr</li>
</ul></li>
</ul>
<!---
vim: spl=en spell:
-->
<p>% Linux - Syscalls % Rémi Audebert - Pierre Surply % 2015-05-22</p>
<h1 id="generalities">Generalities</h1>
<h2 id="what-is-a-syscall">What is a syscall?</h2>
<p>User space can issue requests to the kernel in order to access its resources or perfrom restricted operations.</p>
<p>You can think of a syscall as regular function call, but where the code being called is in the kernel.</p>
<p>Syscalls usages:</p>
<ul>
<li>Manipulating files and VFS: <code>open</code>, <code>read</code>, <code>write</code>, …</li>
<li>System setup: <code>gettimeofday</code>, <code>swapon</code>, <code>shutdown</code>…</li>
<li>Processes management: <code>clone</code>, <code>mmap</code>, …</li>
<li>Manipulating devices: <code>ioctl</code>, <code>mount</code>, …</li>
<li>Cryptography and security: <code>seccomp</code>, <code>getrandom</code>, …</li>
<li>…</li>
</ul>
<h1 id="the-syscall-userland-interfaces">The syscall userland interfaces</h1>
<h2 id="in-assembly">In assembly</h2>
<h3 id="on-x86">On x86</h3>
<div class="sourceCode"><pre class="sourceCode nasm"><code class="sourceCode nasm"><span class="kw">mov</span> <span class="kw">eax</span>, <span class="dv">1</span> <span class="co">; exit</span>
<span class="kw">int</span><span class="bn"> 0x80 </span><span class="co">; or sysenter</span></code></pre></div>
<ul>
<li>Syscall number: <code>eax</code></li>
<li>Arguments: <code>ebx</code>, <code>ecx</code>, <code>edx</code>, <code>esi</code>, <code>edi</code>, <code>ebp</code>, then use the stack</li>
</ul>
<h3 id="on-x86_64">On x86_64</h3>
<div class="sourceCode"><pre class="sourceCode nasm"><code class="sourceCode nasm"><span class="kw">mov</span> rax, <span class="dv">60</span> <span class="co">; exit</span>
<span class="kw">syscall</span></code></pre></div>
<ul>
<li>Syscall number: <code>rax</code></li>
<li>Arguments: <code>rdi</code>, <code>rsi</code>, <code>rdx</code>, <code>rcx</code>, <code>r8</code> and <code>r9</code>, no args on memory</li>
</ul>
<h2 id="syscall2">syscall(2)</h2>
<div class="sourceCode"><pre class="sourceCode c"><code class="sourceCode c"><span class="ot">#include &lt;unistd.h&gt;</span>
<span class="ot">#include &lt;sys/syscall.h&gt; </span><span class="co">/* for __NR_xxx */</span>

<span class="dt">long</span> syscall(<span class="dt">long</span> number, ...);</code></pre></div>
<ul>
<li>Copies the arguments and syscall number to the registers.</li>
<li>Traps to kernel code.</li>
<li>Sets <code>errno</code> if the syscall returns an error.</li>
</ul>
<h2 id="dont-panic">Don’t panic!</h2>
<ul>
<li>You will learn all about that in kernel from scratch!</li>
<li>You almost never use direct calls to <code>syscall(2)</code>.</li>
<li>Your libc provides wrappers for most of the syscalls you need.</li>
<li>Linux also abstracts all thoses details in kernel code.</li>
<li>For a list of the Linux system calls, see <code>syscalls(2)</code>.</li>
</ul>
<h2 id="vdso7">vdso(7)</h2>
<ul>
<li>Virtual Dynamically linked Shared Objects</li>
<li>Small shared library (8k) that the kernel automatically maps into the address space of all user-space applications.</li>
<li>Contains non priviledged code and data: <code>gettimeofday</code>, <code>time</code>, <code>clock_gettime</code>, … (arch-depedent)</li>
<li>The ELF must be dynamically linked.</li>
</ul>
<p>Why?</p>
<ul>
<li>Making system calls can be slow.</li>
<li>On x86 32bit, <code>int 0x80</code> is expensive: goes through the full interrupt-handling paths in the processor’s microcode as well as in the kernel.</li>
<li>Even if there is a dedicated instr (<code>syscall</code>), context switching must be done.</li>
</ul>
<h2 id="context-switch">Context switch</h2>
<p>A context is:</p>
<ul>
<li>The CPU registers (including the instruction pointer)</li>
<li>The state of a process (including threads):
<ul>
<li>Memory state: stack, page tables, etc.</li>
<li>CPU state: registers, caches, etc.</li>
</ul></li>
</ul>
<h2 id="vdso-in-action">vdso in action</h2>
<p></p>
<div class="sourceCode"><pre class="sourceCode bash"><code class="sourceCode bash">$ <span class="kw">cat</span> time.c
<span class="kw">int</span> main(int ac, char **av) <span class="kw">{</span>
    <span class="kw">printf</span>(<span class="st">&quot;%d\n&quot;</span>, time(0));
<span class="kw">}</span>
$ <span class="kw">gcc</span> time.c -o time -static
$ <span class="kw">strace</span> -e time ./time
<span class="kw">time</span>(NULL)                              = <span class="kw">1411171041</span>
<span class="kw">1411171041</span>
<span class="kw">+++</span> exited with 11 +++
$ <span class="kw">gcc</span> time.c -o time
$ <span class="kw">ldd</span> ./time
        <span class="kw">linux-vdso.so.1</span> (0x00007fffe1735000)
        <span class="kw">libc.so.6</span> =<span class="kw">&gt;</span> /usr/lib/libc.so.6 (0x00007fee5e753000)
        <span class="kw">/lib64/ld-linux-x86-64.so.2</span> (0x00007fee5eb01000)
$ <span class="kw">strace</span> -e time ./time
<span class="kw">1411171118</span>
<span class="kw">+++</span> exited with 11 +++</code></pre></div>
<h1 id="implementation">Implementation</h1>
<h2 id="defining-a-syscall">Defining a syscall</h2>
<p>Use the <code>SYSCALL_DEFINEx(syscall, ...)</code> macros anywhere in Linux code.</p>
<p>These macros expands to:</p>
<ul>
<li><code>SYSCALL_METADATA(syscall, ...)</code> generate metadata used in <code>FTRACE</code> tracing framework</li>
<li><code>__SYSCALL_DEFINEx(syscall, ...)</code> more function definition expansion</li>
<li>Ultimatly: <code>asmlinkage long SyS_syscall(..)</code></li>
<li><code>asmlinkage</code> means that arguments are on the stack.</li>
</ul>
<h2 id="example">Example</h2>
<p>In <code>kernel/signal.c</code>:</p>
<p></p>
<div class="sourceCode"><pre class="sourceCode c"><code class="sourceCode c"><span class="dv">3538</span> SYSCALL_DEFINE0(pause)
<span class="dv">3539</span> {
<span class="dv">3540</span>         <span class="kw">while</span> (!signal_pending(current)) {
<span class="dv">3541</span>                 current-&gt;state = TASK_INTERRUPTIBLE;
<span class="dv">3542</span>                 schedule();
<span class="dv">3543</span>         }
<span class="dv">3544</span>         <span class="kw">return</span> -ERESTARTNOHAND;
<span class="dv">3545</span> }</code></pre></div>
<h2 id="side-notes">Side notes</h2>
<h3 id="signal_pending">signal_pending</h3>
<p></p>
<div class="sourceCode"><pre class="sourceCode c"><code class="sourceCode c"><span class="dt">static</span> <span class="kw">inline</span> <span class="dt">int</span> signal_pending(<span class="kw">struct</span> task_struct *p)
{
        <span class="kw">return</span> unlikely(
            test_tsk_thread_flag(p,TIF_SIGPENDING));
}</code></pre></div>
<h3 id="current">current</h3>
<p></p>
<div class="sourceCode"><pre class="sourceCode c"><code class="sourceCode c"><span class="ot">#include &lt;asm/current.h&gt;</span>
...
pr_debug(<span class="st">&quot;The process is </span><span class="ch">\&quot;</span><span class="st">%s</span><span class="ch">\&quot;</span><span class="st"> (pid %i)</span><span class="ch">\n</span><span class="st">&quot;</span>,
     current-&gt;comm, current-&gt;pid);</code></pre></div>
<h3 id="schedule">schedule()</h3>
<p></p>
<p>Pick the next process to run.</p>
<h2 id="the-syscalls-tables">The syscalls tables</h2>
<p>See <code>arch/x86/syscalls/syscall_{32,64}.tbl</code>.</p>
<h3 id="syscall_32.tbl"><code>syscall_32.tbl</code></h3>
<p></p>
<pre><code># &lt;number&gt; &lt;abi&gt; &lt;name&gt; &lt;entry point&gt; &lt;compat entry point&gt;
0       i386    restart_syscall         sys_restart_syscall
1       i386    exit                    sys_exit
2       i386    fork                    sys_fork                        stub32_fork
3       i386    read                    sys_read
4       i386    write                   sys_write
5       i386    open                    sys_open                        compat_sys_open
6       i386    close                   sys_close
</code></pre>
<h3 id="syscall_64.tbl"><code>syscall_64.tbl</code></h3>
<p></p>
<pre><code>0       common  read                    sys_read
1       common  write                   sys_write
2       common  open                    sys_open
3       common  close                   sys_close
4       common  stat                    sys_newstat
5       common  fstat                   sys_newfstat
...
16      64      ioctl                   sys_ioctl
...
514     x32     ioctl                   compat_sys_ioctl</code></pre>
<h2 id="generation">Generation</h2>
<ul>
<li>Kbuild calls the <code>syscalltbl.sh</code> to generate <code>arch/x86/include/generated/asm/syscalls_{64,32}.h</code></li>
<li>Same with <code>syscallhdr.sh</code></li>
</ul>
<h1 id="a-guided-tour-of-some-syscalls">A guided tour of some syscalls</h1>
<h2 id="sysinfo">sysinfo</h2>
<p><code>kernel/sys.c</code></p>
<p></p>
<div class="sourceCode"><pre class="sourceCode c"><code class="sourceCode c"><span class="dv">2099</span> SYSCALL_DEFINE1(sysinfo,
                     <span class="kw">struct</span> sysinfo __user *, info)
<span class="dv">2100</span> {
<span class="dv">2101</span>         <span class="kw">struct</span> sysinfo val;
<span class="dv">2102</span> 
<span class="dv">2103</span>         do_sysinfo(&amp;val);
<span class="dv">2104</span> 
<span class="dv">2105</span>         <span class="kw">if</span> (copy_to_user(info, &amp;val,
                              <span class="kw">sizeof</span>(<span class="kw">struct</span> sysinfo)))
<span class="dv">2106</span>                 <span class="kw">return</span> -EFAULT;
<span class="dv">2107</span> 
<span class="dv">2108</span>         <span class="kw">return</span> <span class="dv">0</span>;
<span class="dv">2109</span> }</code></pre></div>
<h2 id="user-data">User data</h2>
<h3 id="user"><code>__user</code></h3>
<ul>
<li>Used by tools such as <code>sparse</code> to statically check the use of userspace pointers.</li>
<li><code># define __user __attribute__((noderef, address_space(1)))</code></li>
</ul>
<h3 id="copy_to_user"><code>copy_to_user</code></h3>
<ul>
<li>Copy data from kernel land to user land.</li>
<li>Checks that all bytes are writeable, using:
<ul>
<li><code>access_ok(VERIFIY_WRITE, addr_to, length)</code></li>
</ul></li>
</ul>
<h2 id="ioctl">ioctl</h2>
<div class="sourceCode"><pre class="sourceCode c"><code class="sourceCode c"><span class="ot">#include &lt;sys/ioctl.h&gt;</span>
<span class="dt">int</span> ioctl(<span class="dt">int</span> d, <span class="dt">unsigned</span> <span class="dt">long</span> request, ...);</code></pre></div>
<ul>
<li>Control devices.</li>
<li>A big mess:
<ul>
<li>Request numbers encodes data.</li>
<li>Request data is untyped (<code>void *</code>).</li>
</ul></li>
<li>See LDD3, Chapter 6: Advanced Char Driver Operations.</li>
</ul>
<h2 id="clone">clone</h2>
<h3 id="clone-1">clone</h3>
<p></p>
<div class="sourceCode"><pre class="sourceCode c"><code class="sourceCode c">SYSCALL_DEFINE5(clone, <span class="dt">unsigned</span> <span class="dt">long</span>, clone_flags,
                <span class="dt">unsigned</span> <span class="dt">long</span>, newsp,
                <span class="dt">int</span> __user *, parent_tidptr,
                <span class="dt">int</span> __user *, child_tidptr,
                <span class="dt">int</span>, tls_val)
{
    <span class="kw">return</span> do_fork(clone_flags, newsp, <span class="dv">0</span>, parent_tidptr, child_tidptr);
}</code></pre></div>
<p>. . .</p>
<h3 id="fork">fork</h3>
<p></p>
<div class="sourceCode"><pre class="sourceCode c"><code class="sourceCode c">SYSCALL_DEFINE0(fork)
{
    <span class="kw">return</span> do_fork(SIGCHLD, <span class="dv">0</span>, <span class="dv">0</span>, NULL, NULL);
}</code></pre></div>
<p>. . .</p>
<h3 id="vfork">vfork</h3>
<p></p>
<div class="sourceCode"><pre class="sourceCode c"><code class="sourceCode c">SYSCALL_DEFINE0(vfork)
{
    <span class="kw">return</span> do_fork(CLONE_VFORK | CLONE_VM | SIGCHLD, <span class="dv">0</span>,
                       <span class="dv">0</span>, NULL, NULL);
}</code></pre></div>
<p>. . .</p>
<h2 id="personality">personality</h2>
<div class="sourceCode"><pre class="sourceCode c"><code class="sourceCode c"><span class="ot">#include &lt;sys/personality.h&gt;</span>

<span class="dt">int</span> personality(<span class="dt">unsigned</span> <span class="dt">long</span> persona);</code></pre></div>
<ul>
<li>Sets the process execution domain</li>
<li>Used by <code>setarch</code></li>
<li>Tweak:
<ul>
<li>uname-2.6</li>
<li>exposed architecture (<code>i386</code>, <code>i486</code>, <code>i586</code>, etc.)</li>
<li><code>STICKY_TIMEOUT</code></li>
<li>…</li>
</ul></li>
</ul>
<h2 id="reboot">reboot</h2>
<div class="sourceCode"><pre class="sourceCode c"><code class="sourceCode c"><span class="ot">#include &lt;unistd.h&gt;</span>
<span class="ot">#include &lt;linux/reboot.h&gt;</span>

<span class="dt">int</span> reboot(<span class="dt">int</span> magic, <span class="dt">int</span> magic2, <span class="dt">int</span> cmd, <span class="dt">void</span> *arg);</code></pre></div>
<p></p>
<pre><code>This system call will fail (with EINVAL) unless magic equals
LINUX_REBOOT_MAGIC1 (that is, 0xfee1dead) and magic2 equals
LINUX_REBOOT_MAGIC2 (that is, 672274793).  However, since 2.1.17 also
LINUX_REBOOT_MAGIC2A (that is, 85072278) and since 2.1.97 also
LINUX_REBOOT_MAGIC2B (that is, 369367448) and since 2.5.71 also
LINUX_REBOOT_MAGIC2C (that is, 537993216) are permitted as value for
magic2. (The hexadecimal values of these constants are meaningful.)</code></pre>
<h2 id="rt_xxx-syscalls"><code>rt_XXX</code> syscalls</h2>
<p>The addition or real-time signals required the widening of the signal set structure (<code>sigset_t</code>) from 32 to 64 bits. Consequently, various system calls were superseded by new system calls that supported the larger signal sets.</p>
<table>
<colgroup>
<col style="width: 33%" />
<col style="width: 33%" />
</colgroup>
<thead>
<tr class="header">
<th style="text-align: left;">Linux &lt; 2.0</th>
<th style="text-align: left;">Linux &gt;= 2.2</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;"><p><code>sigaction(2)</code></p></td>
<td style="text-align: left;"><p><code>rt_sigaction(2)</code></p></td>
</tr>
<tr class="even">
<td style="text-align: left;"><p><code>sigpending(2)</code></p></td>
<td style="text-align: left;"><p><code>rt_sigpending(2)</code></p></td>
</tr>
<tr class="odd">
<td style="text-align: left;"><p><code>sigprocmask(2)</code></p></td>
<td style="text-align: left;"><p><code>rt_sigprocmask(2)</code></p></td>
</tr>
<tr class="even">
<td style="text-align: left;"><p><code>sigreturn(2)</code></p></td>
<td style="text-align: left;"><p><code>rt_sigreturn(2)</code></p></td>
</tr>
<tr class="odd">
<td style="text-align: left;"><p><code>sigsusprend(2)</code></p></td>
<td style="text-align: left;"><p><code>rt_sigsuspend(2)</code></p></td>
</tr>
<tr class="even">
<td style="text-align: left;"><p><code>sigtimedwait(2)</code></p></td>
<td style="text-align: left;"><p><code>rt_sigtimedwait(2)</code></p></td>
</tr>
</tbody>
</table>
<h2 id="going-further-than-syscalls">Going further than syscalls</h2>
<ul>
<li>There are places in the kernel where the complexity of the task goes bewond a call to a function.</li>
<li><code>ioctl</code> has grew dangerously.</li>
<li>For example, <code>netlink(7)</code> aims to replace <code>ioctl</code> for network configuration.</li>
</ul>
<h2 id="references">References</h2>
<ul>
<li>http://lwn.net/Articles/604287/</li>
<li>http://lwn.net/Articles/604515/</li>
<li>https://www.kernel.org/doc/htmldocs/kernel-hacking</li>
<li>Searchable Linux Syscall Table: https://filippo.io/linux-syscall-table/</li>
</ul>
<h2 id="contact-info-1">Contact info</h2>
<ul>
<li>Rémi Audebert
<ul>
<li>halfr on irc.rezosup.org</li>
<li>halfr@lse.epita.fr</li>
</ul></li>
<li>Pierre Surply
<ul>
<li>Ptishell on irc.rezosup.org</li>
<li>pierre.surply@lse.epita.fr</li>
</ul></li>
</ul>
</div>
</body>
</html>
