Kernel Programming
==================

## Kernel Programming - I

### Workshop

- [Linux Workshop 0](workshop_0_bootstrap.html)
- Kernel from scratch: make a kernel bootable on an i386 emulator that prints
  `Hello World!` on the screen and serial port. For that, you must work on:

	- A linker script.
	- C sources of your kernel, with:

		- A setup of the serial line as: 38400 baud, 8N1
		- A `printk()` function.

	- A Makefile with the following recipes:

		- Building the kernel image
		- Debugging

	- For more information, follow the slides from Lecture #1.

### Projects

Both projects (and their subprojects) are mandatory:

- [Linux](seminar_0_linux.html)
- [KFS](seminar_0_kfs.html)

## Kernel Programming - II

### Workshop: `chiffrefs`

Write an overlay filesystem where each byte wrote to a file is rotated by a
number given on the option string.

Usage:

```bash
$ insmod chiffrefs.ko
$ mkdir chiffred clear
$ mount chiffred clear -t chiffrefs -o n=13
$ echo -n foobar >clear/test
$ cat clear/test
foobar
$ cat chiffred/test
sbbone
```

Writing a filesystem module from scratch is not an easy task. If you want
inspiration, we recommend you to look at the implementation of the `ramfs` and
`overlayfs` filesystems.

### Projects

Both projects (and their subprojects) are mandatory:

- [Linux](seminar_1_linux.html)
- [KFS](seminar_1_kfs.html)

## Kernel Programming - III

### Workshop

### Projects

Both projects (and their subprojects) are mandatory:

- [Linux (to be announced later)](seminar_2_linux.html)
- [KFS](seminar_2_kfs.html)

## Contact us!

### Emails

- halfr@lse.epita.fr
- surply@lse.epita.fr

### IRC

Come have a chat on [#k@irc.rezosup.org](irc://#k@irc.rezosup.org).
