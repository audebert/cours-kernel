% Linux - Scheduling
% RÃ©mi Audebert
% 2015-06-19

# Scheduling

### Introduction

- Linux is a time sharing OS.
- Multiple processes are executed "simultaneously".
- This is achieved by switching from one process to another in a very short
  time frame.
- Problems:

    - When to switch?
    - Which is the next process?

### Scheduling needs

- Fast process response time
- Good throughput for background jobs
- Avoid process starvation
- Respect of the processes priorities

### Time sharing

- A CPU can only run one process at a given instant.
- CPU time is divided into time slices, or *quanta*.
- If a currently running process is not terminated when its *quantum* expires,
  a process switch may take place.
- Time sharing relies on timer interrupts and is transparent to processes.

### Scheduling policy

- Processes are ranked and sorted by their priorities and current activity.
- Processes ranks are dynamic, the scheduler keeps tracks of what processes are
  doing and adjust their priorities.
- Two classes of processes:

    - I/O-bound: spend must time waiting for devices
    - CPU-bound: require only CPU time

### Linux schedulers history

- O(1), very complex and difficult to model
- Rotating Staircase (2004)
- Rotating Staircase Deadline (2007)
- Completely Fair Scheduler (CFS), introduced in 2.6.23, based on RSDL, this is
now the default scheduler
- Brain Fuck Scheduler (2009), simpler alternative to CFS

<!---
Con Kolivas
-->

### Scheduler classes

Different processes can have different scheduler classes:

- Normal (non-real-time):

    - `SCHED_OTHER`: round-robin time-sharing
    - `SCHED_BATCH`: for "background" jobs
    - `SCHED_IDLE`: for *very* low priority background jobs

- Real-time:

    - `SCHED_FIFO`: First-in-first-out
    - `SCHED_RR`: Realtime round-robin
    - `SCHED_DEADLINE`: Earliest deadline first

Each scheduling class will be executed one after the other, in their priority
order.

<!---
Earliest deadline first (EDF) or least time to go is a dynamic scheduling
algorithm used in real-time operating systems to place processes in a priority
queue. Whenever a scheduling event occurs (task finishes, new task released,
etc.) the queue will be searched for the process closest to its deadline. This
process is the next to be scheduled for execution.
-->

### Realtime scheduling

- The standard Linux kernel only meets soft real-time requirements.
- No guarantees for hard timing deadlines.
- The `-rt` patchset aims to provide deterministic latencies
- Xenomai is an exokernel, cooperating with Linux to provide hard real-time
  primitives accessible from kernel modules integrating into the Real-Time
  Driver Model.

### Symmetric multiprocessing (SMP)

- Two or more identical processors connected to a single, shared main memory.
- Each CPU has a different Linux instance.

#### Processor affinity (or pinning)

- Each task has a bitmask (`on_cpu` field of `struct task_struct`), saying
  which CPU it can run on.
- Manually pinning tasks to CPU can make a big difference for high
  interactivity multithreaded tasks such as games.

### Periodic ticks

- Each running CPU is interrupted `HZ` time each second by the periodic timer.
  `HZ` value is between 100 and 1000. See `zgrep CONFIG_HZ /proc/config.gz`.
- Each tick, Linux may perform:

    - Time keeping
    - Scheduling
    - Process statistics (`getrusage()`)
    - Deferred free (RCU, lockless operations)
    - Deferred processing (tasklets, work queues)
    - OS maintenance

- Each tick, `scheduler_tick()` is called.

### A tickless kernel

- Problems with ticking systems:

    - Periodic ticking is a performance issue.
    - High power usage.

- Solutions:

    - `CONFIG_NO_HZ_IDLE`: ticking is disabled when the CPU is idle (default
      for most distributions)
    - `CONFIG_NO_HZ_FULL`: no ticking at all (except for boot CPU)

<!---
http://lwn.net/Articles/549580/
https://events.linuxfoundation.org/sites/events/files/slides/LinuxCon%20-%20TicklessKernel_revc.pdf
-->

### Syscalls related to scheduling

- `nice()`: Change the static priority of a process.
- `setpriority()`, `getpriority()`: Get/Set nice value of a process, process
  group or user.
- `sched_setscheduler()`, `sched_getscheduler()`: Get/Set scheduler for a
  specific thread.
- `sched_setattr()`, `sched_getattr()`: Get/Set the scheduling policy and
  parameters of a specified thread.
- `sched_yield()`: Relinquish the processor voluntarily without blocking.

### Kernel threads

- They share the same virtual address space, just like threads in a process.
- The are low overhead and easy to use.
- Scheduled as all other tasks
- PID 2 (`[kthreadd]`) is the parent of all kernel threads.

### Kernel threads

Worker function:

```c
int thread_function(void *data)
{
    while(!kthread_should_stop()){
        schedule();
    }
    return 0;
}
```

Spawning the thread:

```c
/* Create and run the task */
struct task_struct *task = kthread_run(
    &thread_function, (void *)data, "mythread");
/* */
kthread_stop(task);
```

### Concurrent processing primitives

More primitives are available for kernel development usage:

- **Kernel timers**: time scheduled work
- **Tasklets**: request a function to be executed *later*
- **Workqueues**: dedicated thread which run functions submitted to the queue
- **Semaphores, mutexes and locks**: Tools to avoid race-condition.
- **Completions**: Semaphores optimized for the wait case.

<!---
If you only submit tasks to the queue occasionally, it may be more efficient to
simply use the shared, default workqueue that is provided by the kernel.
-->

### References

\small

- <https://www.cs.columbia.edu/~smb/classes/s06-4118/l13.pdf>
- <https://events.linuxfoundation.org/sites/events/files/slides/LinuxCon%20-%20TicklessKernel_revc.pdf>
- <http://criticalblue.com/news/wp-content/uploads/2013/12/linux_scheduler_notes_final.pdf>
- <http://www.ops-class.org/slides/2015-02-27-schedulingstory/>

<!---
vim: spl=en spell:
-->
